class RandomAccessList
  constructor: ->
    @length = 0

  push: (item) ->
    {ID} = item
    {last} = @
    item.prev = last
    @[ID] = item
    @last = if last
      last.next = item
    else
      @first = item
    @length++

  after: (root, item) ->
    return if item.prev is root

    @rmi item

    {next} = root
    next.prev = item
    item.next = next
    root.next = item
    item.prev = root
  
  prepend: (item) ->
    {ID} = item
    @push item unless @[ID]
    {first} = @
    item.next = first unless @ is first
    first.prev = item if first
    @first = item
    delete item.prev

  shift: ->
    @rm @first.ID

  splice: (start, end) ->
    return unless @[end]
    cur = if start is 0 then @first else @[start]
    while cur
      {next} = cur
      @rm cur.ID
      return if not next or cur.ID is end
      cur = next

  rm: (ID) ->
    item = @[ID]
    return unless item
    delete @[ID]
    @length--
    @rmi item
    delete item.next
    delete item.previous

  rmi: (item) ->
    {prev, next} = item
    if prev
      prev.next = next
    else
      @first = next
    if next
      next.prev = prev
    else
      @last = prev

  closest: (ID) ->
    item = @first
    while item
      if item.ID > ID
        {prev} = item.prev
        break
      item = item.next
    return (if prev then prev.ID else -1)