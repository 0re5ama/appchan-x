class Thread
  @callbacks = new Callbacks 'Thread'
  toString: -> @ID

  constructor: (@ID, @board) ->
    @fullID    = "#{@board}.#{@ID}"
    @posts     = new SimpleDict
    @isSticky  = false
    @isClosed  = false
    @postLimit = false
    @fileLimit = false

    g.threads.push @fullID, board.threads.push @, @

  setPage: (pageNum) ->
    icon = $ '.page-num', @OP.nodes.post
    for key in ['title', 'textContent']
      icon[key] = icon[key].replace /\d+/, pageNum
    $('.page-count', @catalogView).textContent = pageNum if @catalogView

  setCount: (type, count, reachedLimit) ->
    return unless @catalogView
    el = $ ".#{type}-count", @catalogView
    el.textContent = count
    (if reachedLimit then $.addClass else $.rmClass) el, 'warning'

  setStatus: (type, status) ->
    name = "is#{type}"
    return if @[name] is status
    @[name] = status
    return unless @OP
    typeLC = type.toLowerCase()
    unless status
      $.rm $ ".#{typeLC}Icon", @OP.nodes.info
      $.rm $ ".#{typeLC}Icon", @catalogView if @catalogView
      return

    icon = $.el 'img',
      src: "#{Build.staticPath}#{typeLC}#{Build.gifIcon}"
      alt:   type
      title: type
      className: "#{typeLC}Icon"
    root = if type is 'Closed' and @isSticky
      $ '.stickyIcon', @OP.nodes.info
    else if g.VIEW is 'index'
      $ '.page-num', @OP.nodes.info
    else
      $ '[title="Reply to this post"]', @OP.nodes.info
    $.after root, [$.tn(' '), icon]

    return unless @catalogView
    root = $ '.thread-icons', @catalogView
    (if type is 'Sticky' and @isClosed then $.prepend else $.add) root, icon.cloneNode()

  getCatalogView: ->
    return @catalogView if @catalogView
    @catalogView = Build.threadCatalog @
    $.on $('.thumb', @catalogView), 'click', @onCatalogViewClick
    @catalogView
  onCatalogViewClick: (e) =>
    return if e.button isnt 0
    if e.shiftKey
      $.rm @catalogView
      ThreadHiding.hide @
      ThreadHiding.saveHiddenState @
    else if e.altKey
      Index.togglePin @
    else
      return
    e.preventDefault()
  pin: ->
    @isOnTop = @isPinned = true
    $.addClass @catalogView, 'pinned' if @catalogView
  unpin: ->
    @isOnTop = @isPinned = false
    $.rmClass  @catalogView, 'pinned' if @catalogView

  kill: ->
    @isDead = true
    @timeOfDeath = Date.now()

  collect: ->
    @posts.forEach (post) -> post.collect()
    g.threads.rm @fullID
    @board.threads.rm @
