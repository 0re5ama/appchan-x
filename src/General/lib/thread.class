class Thread
  @callbacks = new Callbacks 'Thread'
  toString: -> @ID

  constructor: (@ID, @board) ->
    @fullID    = "#{@board}.#{@ID}"
    @posts     = new SimpleDict
    @isSticky  = false
    @isClosed  = false
    @postLimit = false
    @fileLimit = false

    @OP = null
    @catalogView = null

    g.threads.push @fullID, board.threads.push @, @

  setPage: (pageNum) ->
    {info} = @OP.nodes
    unless icon = $ '.page-num', info
      icon = $.el 'span', className: 'page-num'
      $.after $('a[title="Reply to this post"]', info), [$.tn(' '), icon]
    icon.title       = "This thread is on page #{pageNum} in the original index."
    icon.textContent = "[#{pageNum}]"
    @catalogView.nodes.pageCount.textContent = pageNum if @catalogView
  setCount: (type, count, reachedLimit) ->
    return unless @catalogView
    el = @catalogView.nodes["#{type}Count"]
    el.textContent = count
    (if reachedLimit then $.addClass else $.rmClass) el, 'warning'

  setStatus: (type, status) ->
    name = "is#{type}"
    return if @[name] is status
    @[name] = status
    return unless @OP
    typeLC = type.toLowerCase()
    unless status
      $.rm $ ".#{typeLC}Icon", @OP.nodes.info
      $.rm $ ".#{typeLC}Icon", @catalogView.nodes.icons if @catalogView
      return

    icon = $.el 'img',
      src: "#{Build.staticPath}#{typeLC}#{Build.gifIcon}"
      alt:   type
      title: type
      className: "#{typeLC}Icon retina"
    root = if type is 'Closed' and @isSticky
      $ '.stickyIcon', @OP.nodes.info
    else
      $('.page-num', @OP.nodes.info) or $('[title="Reply to this post"]', @OP.nodes.info)
    $.after root, [$.tn(' '), icon]

    return unless @catalogView
    (if type is 'Sticky' and @isClosed then $.prepend else $.add) @catalogView.nodes.icons, icon.cloneNode()

  pin: ->
    @isOnTop = @isPinned = true
    $.addClass @catalogView.nodes.root, 'pinned' if @catalogView
  unpin: ->
    @isOnTop = @isPinned = false
    $.rmClass  @catalogView.nodes.root, 'pinned' if @catalogView

  kill: ->
    @isDead = true
    @timeOfDeath = Date.now()

  collect: ->
    @posts.forEach (post) -> post.collect()
    g.threads.rm @fullID
    @board.threads.rm @
